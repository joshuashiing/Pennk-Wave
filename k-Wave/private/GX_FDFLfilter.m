function [a_filter] = GX_FDFLfilter(alpha, Nmax, h)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% 2D Fractional Laplacian operator -(-\Delta)^{\alpha/2};
% The weighted trapezoidal method is applied;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%==========================================================================
% Latest version: 2017/03/22 (Wednesday);
%==========================================================================

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%--------------------------------------------------------------------------
% function [a]=Trapezoidal_2DfL_fft_pal(alpha, xb, xe, N)

% alpha = 3;
% xb = -3;
% xe = 3;
% N = 100;

% a = Trapezoidal_2DfL_fft_pal(alpha, xb, xe, N);
% imagesc(log10(abs(a))); colorbar;
% return

%%%% Inputs %%%%
% alpha: The fractional power;
% N    : The number of mesh;
% xb/xe: The left/right ending point of domain;
%%%% Outputs %%%%
% a   : i.e. the first N_1-1 rows of the fractional Laplacian matrix is made by
%       B = [Toeplitz(a(1));Toeplitz(a(2));...;Toeplitz(a(N_1-1))];
%--------------------------------------------------------------------------
%==========================================================================

% Parameters;
N = Nmax - 1;
L = N * h;
xi1 = (0:h:L)'; xi2 = xi1;
dd = 2; % Dimension;
C_alpha=(2^(alpha-1)*alpha*gamma((dd+alpha)/2))/(sqrt(pi)^dd*gamma(1-alpha/2));
r = 2;
%==========================================================================

%==========================================================================
% Some coefficients;
%--------------------------------------------------------------------------
[xi1m,xi2m] = meshgrid(xi1,xi2);
d = (sqrt(xi1m.^2 + xi2m.^2)).^(-r);
d(1,1) = 0;
%--------------------------------------------------------------------------
funx = @(x) (sin(x)).^(alpha);
fun = @(x,y) (sqrt(x.^2+y.^2)).^(-2-alpha);
q = 2*L^(-alpha)/alpha*integral(funx,0,pi/4,'RelTol',1e-16,'AbsTol',0); % equal to integral2(fun,L,Inf,L,Inf);
wL = q+integral2(fun,0,L,L,Inf,'RelTol',1e-16,'AbsTol',0)+integral2(fun,L,Inf,0,L,'RelTol',1e-16,'AbsTol',0);
%==========================================================================

%==========================================================================
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Kernel function %%%%
f = @(x,y) (sqrt(x.^2+y.^2)).^(-2-alpha+r);
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
a = zeros(N+1,N+1);
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Corners (0,N) and (N,0) %%%%
% -----------------------------------------------------------------
xmin = (N-1)*h; xmax = N*h; ymin = 0; ymax = h;
I = integral2(f,ymin,ymax,xmin,xmax,'RelTol',1e-16,'AbsTol',0);
a(N+1,1) = d(N+1,1)*I/2;
a(1,N+1) = a(N+1,1);
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Corners (N,N) %%%%
% -------------------------------------------------------------------------
xmin = (N-1)*h; xmax = N*h; ymin = (N-1)*h; ymax = N*h;
I = integral2(f,ymin,ymax,xmin,xmax,'RelTol',1e-16,'AbsTol',0);
a(N+1,N+1) = d(N+1,N+1)*I/4;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Boundary (1:N-1,0) and (0,1:N-1) %%%%
% -------------------------------------------------------------------------
ff = @(x) (h./cos(x)).^(2-alpha);
I1 = 2/(2-alpha)*integral(ff,0,pi/4,'RelTol',1e-16,'AbsTol',0);
% -------------------------------------------------------------------------
xmin = h; xmax = 2*h; ymin = 0; ymax = h;
I2 = integral2(f,xmin,xmax,ymin,ymax,'RelTol',1e-16,'AbsTol',0);
% -------------------------------------------------------------------------
a(2,1) = I1/h^2 + d(2,1)*I2/2;
a(1,2) = a(2,1);
% -------------------------------------------------------------------------
I = zeros(N+1,1);
parfor i = 3:N
    % ---------------------------------------------------------------------
    xmin = (i-2)*h; xmax = i*h; ymin = 0; ymax = h;
    I(i) = integral2(f,xmin,xmax,ymin,ymax,'RelTol',1e-16,'AbsTol',0);
end
a(3:N,1) = d(3:N,1).*I(3:N,1)/2;
a(1,3:N) = a(3:N,1);
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Boundary (N,1:N-1) and (1:N-1,N) %%%%
I = zeros(N+1,1);
parfor i = 2:N
    % ---------------------------------------------------------------------
    xmin = (i-2)*h; xmax = i*h; ymin = (N-1)*h; ymax = N*h;
    I(i) = integral2(f,xmin,xmax,ymin,ymax,'RelTol',1e-16,'AbsTol',0);
    % ---------------------------------------------------------------------
end
a(2:N,N+1) = d(2:N,N+1).*I(2:N)/4;
a(N+1,2:N) = a(2:N,N+1);
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Interior %%%%
% -------------------------------------------------------------------------
%ff = @(x) (h./cos(x)).^(r-alpha);
% -------------------------------------------------------------------------
%I1 = 2*integral(ff,0,pi/4,'RelTol',1e-16,'AbsTol',0);
%I1 = C_alpha/(r-alpha)*I1;
% -------------------------------------------------------------------------
%xmin = 0; xmax = h; ymin = 0; ymax = h;
%I1 = integral2(f,xmin,xmax,ymin,ymax,'RelTol',1e-16,'AbsTol',0);
% -------------------------------------------------------------------------
xmin = 0; xmax = h; ymin = h; ymax = 2*h;
I2 = integral2(f,xmin,xmax,ymin,ymax,'RelTol',1e-16,'AbsTol',0);
% -------------------------------------------------------------------------
%xmin = h; xmax = 2*h; ymin = 0; ymax = h;
%I3 = integral2(f,xmin,xmax,ymin,ymax,'RelTol',1e-16,'AbsTol',0);
I3 = I2;
% -------------------------------------------------------------------------
xmin = h; xmax = 2*h; ymin = h; ymax = 2*h;
I4 = integral2(f,xmin,xmax,ymin,ymax,'RelTol',1e-16,'AbsTol',0);
% -------------------------------------------------------------------------
I = I2+I3+I4; 
% -------------------------------------------------------------------------
a(2,2) = d(2,2)*I/4;
% -------------------------------------------------------------------------
% a(2,3:N) and a(3:N,2);
I = zeros(1,N+1);
parfor j = 3:N
    % -----------------------------------------------------------------
    xmin = 0; xmax = 2*h; ymin = (j-2)*h; ymax = j*h;
    I(j) = integral2(f,xmin,xmax,ymin,ymax,'RelTol',1e-16,'AbsTol',0);
    % -----------------------------------------------------------------
end
a(2,3:N) = d(2,3:N).*I(3:N)/4;
a(3:N,2) = a(2,3:N);
% -------------------------------------------------------------------------
% a(3:N,3:N);
I = zeros(N+1,N+1);
parfor i = 3:N
    for j = 3:N
        % -----------------------------------------------------------------
        xmin = (i-2)*h; xmax = i*h; ymin = (j-2)*h; ymax = j*h;
        I(i,j) = integral2(f,xmin,xmax,ymin,ymax,'RelTol',1e-16,'AbsTol',0);
        % -----------------------------------------------------------------
    end
end
a(3:N,3:N) = d(3:N,3:N).*I(3:N,3:N)/4;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
a(1,1) = (1/2)*(sum(a(2:end,1))+sum(a(1,2:end))) + sum(sum(a(2:end,2:end))) + wL;
a(1,1) = -4*a(1,1);

a = C_alpha*a;

a_q1 = flipud(a(2:end, :));
a_q2 = fliplr(a_q1(:, 2:end));
a_q3 = fliplr(a(:, 2:end));
a_q4 = a;
a_filter = -[a_q2, a_q1; a_q3, a_q4];
